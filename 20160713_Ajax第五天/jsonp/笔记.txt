当前页面的URL地址 && 获取数据的API接口地址 （协议、域名(IP)、端口号）
->三个维度完全相同,属于同源请求策略,我们最常用的是AJAX处理

->三个维度只要有一个不一样,属于跨域请求策略,我们最常用的是JSONP处理 (除了JSONP以外处理跨域还有很多其它的方式,自己回去百度了解)


JSONP
->原理:
  1)“SCRIPT是不受域(或者源)的限制的”：<script>标签不仅仅可以把自己项目中的JS引入到页面中，还可以直接的把别人网站中的JS引入到自己的页面中(技巧:我们平时使用一个类库或者插件,我们可以把JS下载到自己的项目中然后调取使用,但是如果插件JS开启了CDN加速的话,我们直接调取CDN加速后的JS比引入自己项目中的JS速度还要快一些)

  2)JSONP就是利用SCRIPT的上述特点来实现的
    ->把从服务器端获取数据的接口地址赋值给SCRIPT的SRC属性
    ->把当前JS中的某一个函数名当做一个属性值，在通过问号传参的方式传递给服务器端，例如:?callback=[function name]

    ->服务器端接收到客户端的请求,把函数名解析出来,然后按照字符串拼接的方式，拼接出以下格式的结果:
      '函数名(需要给客户端的数据)'
    ->最后服务器端把这个字符串返回给客户端进行解析渲染即可;客户端收到后发现其实就是把某个函数执行,并且给其中的形参传递了一些数据而已;


<script charset="utf-8" type="text/javascript">
    function aa(data) {
        console.log(data);
    }
</script>
<script charset="utf-8" type="text/javascript"
        src="http://matchweb.sports.qq.com/kbs/hotMatchList?callback=aa"></script>

->"http://matchweb.sports.qq.com/kbs/hotMatchList" 其他服务器提供给我们的获取数据的API地址

->"?callback=aa" 客户端把自己定义的一个函数aa,当做参数值传递给服务器；我们一般属性名都用callback，但是不是强制的，我们可以自己修改，但是一旦修改，前后端需要按照修改后的规范实现；(服务器的最终目的其实是把函数名aa获取到,至于属性名是谁可以双方随便定义)

->服务器端接收到请求后，把函数名aa获取到，然后把给客户端返回的数据resData和函数名拼接在一起: aa(resData)
  然后把拼接后的结果返回给客户端

->客户端接收到返回的内容，发现其实就是让自己定义的aa函数执行，并且给aa函数传递了一些参数值而已，所以我们可以定义一个形参接收这个值，而这个值同样也是服务器需要返回给客户端的数据

JSONP是需要服务器做特殊支持处理的,这样的话,只有后台支持才能通过JSONP把其他服务器上的数据获取到